{"version":3,"sources":["components/content.jsx","components/header.jsx","components/searchbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Content","filtered","className","map","e","key","id","name","email","phone","Header","style","textAlign","Search","setSearch","search","employee","setFilter","type","placeholder","aria-label","aria-describedby","onChange","searchTerm","target","value","filter","res","toLowerCase","includes","App","useState","employees","setEmployee","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2mDAgCeA,MA7Bf,YAA+B,IAAZC,EAAW,EAAXA,SAGf,OACI,+BACI,+BACI,4BACI,wBAAIC,UAAU,UAAd,QACA,wBAAIA,UAAU,UAAd,SACA,wBAAIA,UAAU,UAAd,UAEHD,EAASE,KAAI,SAAAC,GAAC,OAEX,wBAAIC,IAAKD,EAAEE,IACP,4BACKF,EAAEG,MAEP,wBAAIL,UAAU,UACTE,EAAEI,OAEP,4BACKJ,EAAEK,cCXhBC,MAXf,WAEI,OACI,gCACI,yBAAKR,UAAU,6BACX,wBAAIS,MAAO,CAACC,UAAW,WAAvB,yBCuBDC,MA5Bf,YAA4D,IAA1CC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,UAa3C,OACI,iCACI,yBAAKf,UAAU,oBACX,2BACAgB,KAAK,OAAOhB,UAAU,eACtBiB,YAAY,sBAAsBC,aAAW,SAC7CC,mBAAiB,gBACjBC,SAjBZ,YAAuC,IAE7BC,EAF4B,EAARC,OAEAC,MAE1BX,EAAUS,GAEVN,EAAUD,EAASU,QAAO,SAAAC,GAAG,OACzBA,EAAIpB,KAAKqB,cAAcC,SAASN,QAW5BE,MAAOV,O,OCGRe,MApBf,WAAgB,IAAD,EACoBC,mBAASC,GAD7B,mBACNhB,EADM,KACKiB,EADL,OAEeF,mBAAS,IAFxB,mBAENhB,EAFM,KAEED,EAFF,OAGeiB,mBAASf,GAHxB,mBAGNU,EAHM,KAGET,EAHF,KAKb,OACE,yBAAKf,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAY,UAAWA,EACXC,OAAQA,EACRkB,YAAaA,EACbjB,SAAUA,EACVC,UAAWA,IAEX,kBAAC,EAAD,CAAShB,SAAUyB,EAAQT,UAAWA,MCTxBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4d47c97.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style/content.css'\r\n\r\nfunction Content ({filtered}) {\r\n\r\n\r\n    return(\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <th className=\"center\">Name</th>\r\n                    <th className=\"center\">Email</th>\r\n                    <th className=\"center\">Phone</th>\r\n                </tr>\r\n                {filtered.map(e => \r\n            \r\n                    <tr key={e.id} >\r\n                        <td>\r\n                            {e.name}\r\n                        </td>\r\n                        <td className=\"center\">\r\n                            {e.email}\r\n                        </td>\r\n                        <td>\r\n                            {e.phone}\r\n                        </td>\r\n                    </tr>)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from \"react\"\r\n\r\nfunction Header (){\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"jumbotron jumbotron-fulid\">\r\n                <h1 style={{textAlign: \"center\"}}>Employee Directory</h1>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nfunction Search ({setSearch, search, employee, setFilter}) {\r\n\r\n\r\n    function updateSearchHandler({target}){\r\n        \r\n        const searchTerm = target.value\r\n    \r\n        setSearch(searchTerm)\r\n        \r\n        setFilter(employee.filter(res =>\r\n            res.name.toLowerCase().includes(searchTerm)))\r\n    }\r\n    \r\n    return(\r\n        <section>\r\n            <div className=\"input-group mb-3\">\r\n                <input \r\n                type=\"text\" className=\"form-control\"\r\n                placeholder=\"Search By Name Here\" aria-label=\"Search\" \r\n                aria-describedby=\"button-addon2\" \r\n                onChange={updateSearchHandler}\r\n                value={search}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, {useState}  from 'react';\r\nimport Content from './components/content';\r\nimport Header from './components/header'\r\nimport Search from './components/searchbar'\r\nimport employees from './employees.json'\r\n\r\nfunction App() { \r\n  const [employee , setEmployee] = useState(employees)\r\n  const [search, setSearch] = useState('')\r\n  const [filter, setFilter] = useState(employee)\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Header/>\r\n      <Search\r\n      setSearch={setSearch}\r\n      search={search}\r\n      setEmployee={setEmployee}\r\n      employee={employee}\r\n      setFilter={setFilter}\r\n      />\r\n      <Content filtered={filter} setFilter={setFilter}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './components/style/content.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}